#!/usr/local/bin/shale

// The primes library is used to generate prime numbers.
//
// First, load it with the library operator

primes library



// The primes library provides these functions:
//
//  type primes::()       set the memory layout for storing primes
//  generate primes::()   generates primes
//  get primes::()        fetch a prime at a given index
//  isprime primes::()    primality check
//  phi primes::()        Euler's totient function
//  map primes::()        deprecated - use isprime primes::() instead
//



// Setting the layout (type)
//
// There are two possible layouts for storing the primes
// you generate - array and sieve. The array layout stores each
// prime in a separate namespace variable and the sieve layout
// stores the primality of each odd prime as a bit, 1 for prime
// and 0 for not prime, with 64 bits being stored in each namespace
// variable. The pros and cons of each layout is discussed below.
//
// To use the sieve layout you must call type primes::()
// before calling generate primes::().
//
// type primes::() takes two arguments on the stack
//    sieve   or   array
//    namespace where you will generate the primes

primesInASieve sieve type primes::()

// The default if you do not set the type before calling generate primes::()
// is array. This is purely for backwards compatibility.



// Generating primes
//
// To generate primes use the generate primes::() function.
// This takes three arguments on the stack
//    highest prime to generate
//    number of primes to generate
//    namespace to store the primes
//
// The highest prime or the number of primes may be given as zero,
// meaning there is no limit. When both are non-zero the first
// limit to be reached, either the highest prime or the number,
// will terminate the generation.
//
// For example,

1000 0 primesInAnArray generate primes::()

// has generated all primes that are less than 1000.
//
// For an array memory layout you can also use the count
// argument to generate an exact number of primes, eg

0 1000 primesInAnArray generate primes::()

// will generate the first 1000 primes.

// You cannot use the count argument with a sieve layout.

// The third argument you push on the stack, "primesInAnArray"
// in this example, is a namespace where the primes and three variables
// are stored.
//
// The variables are the last prime generated (the highest value),
// the number of primes generated and the memory layout.

last primesInAnArray:: "Last prime generated is %d\n" printf
count primesInAnArray:: "%d primes generated\n" printf
type primesInAnArray:: "primesInAnArray memory layout: %s\n" printf
type primesInASieve:: "primesInASieve memory layout: %s\n" printf



// Accessing the primes.
//
// You use
//
//    {index} {ns} get primes::()
//
// to access the index-th prime in the ns namespace.
// Here's the first 10 primes printed out

"First 10 primes:" printf
i var
i 0 =
{ i 10 < } {
  i primesInAnArray get primes::() " %d" printf
  i++
} while
"" println

// To go through all the primes, do something like:

sum var
sum 0 =
i 0 =
{ i count primesInAnArray:: < } {
  sum sum i primesInAnArray get primes::() + =
  i++
} while
sum last primesInAnArray:: "Sum of all the primes up to %d is %d\n" printf




// Primality check
//
// To check the primality of a number use
//
//    {n} {ns} isprime primes::()
//

i 801 =
i primesInAnArray isprime primes::() {
  i "%d is prime\n" printf
} {
  i "%d is not prime\n" printf
} if

// If the value you'd like to check is greater than the current highest prime,
// generate more primes.

i 8009 =
i last primesInAnArray:: > {
  "Generating more primes" println
  i 0 primesInAnArray generate primes::()
} ifthen
i primesInAnArray isprime primes::() {
  i "%d is prime\n" printf
} {
  i "%d is not prime\n" printf
} if



// Euler's totient function
//
// Access this with
//
//  {n} {ns} phi primes::()

12345678 primesInAnArray phi primes::() "phi(12345678) = %d\n" printf



// The good and the bad of each layout type.
//
// First, the bad:
//
//  array
//    - slow to generate primes
//    - uses large amounts of memory
//  sieve
//    - slow for anything other than sequential, non-decreasing
//      access via get primes::()
//
// The good:
//
//  array
//    - fast for non-sequential access
//
//  sieve
//    - fast generation
//    - fastest primality test
//    - fastest phi calculation
//    - small memory footprint
//
// We'll use the time library to measure the time it takes
// to perform some operations.

time library

// Here is a snapshot of the memory usage before we begin. The numbers to watch
// are the BTree numbers.

"" println
"Snapshot before generation tests." println
debug

// Generating primes. We'll time the generation of all primes below 1,000,000
// in both layout types. Please bear in mind that primesInAnArray already
// has 1,000 or so primes generated.

"" println
now time::()
1000000 0 primesInASieve generate primes::()
now time::() swap - 1000.0 / "Generating primes below 1m in a sieve layout took %0.3f seconds\n" printf
debug

"" println
now time::()
1000000 0 primesInAnArray generate primes::()
now time::() swap - 1000.0 / "Generating primes below 1m in an array layout took %0.3f seconds\n" printf
debug

// Sequential access of both types is pretty fast. Here's a loop that compares each prime
// from both lists

"" println
now time::()
i 0 =
{ i count primesInAnArray:: < } {
  i primesInAnArray get primes::() i primesInASieve get primes::() != {
    i "Prime at %d failed - this is not good\n" printf
    break
  } ifthen
  i++
} while
now time::() swap - 1000.0 / "Sequential check of each prime in both lists took %0.3f seconds\n" printf

// Here's what happens when you don't access a sieve sequentially. Here we calculate the sum
// of the last 1000 primes, but do it backwards. Both lists.

"" println
now time::()
sum 0 =
i count primesInASieve:: =
end var
end i 1000 - =
{ i end > } {
  i--
  sum sum i primesInASieve get primes::() + =
} while
now time::() swap - 1000.0 / sum "Backwards sieve sum of the last 1,000 primes is %d and took %0.3f seconds\n" printf

now time::()
sum 0 =
i count primesInAnArray:: =
end i 1000 - =
{ i end > } {
  i--
  sum sum i primesInAnArray get primes::() + =
} while
now time::() swap - 1000.0 / sum "Backwards array sum of the last 1,000 primes is %d and took %0.3f seconds\n" printf

// Next we time the primality function. We'll check 10000 "random" numbers using both layouts. Won't do
// anything with the result other than pop it from the stack. The sieve layout is super fast as it is
// a direct lookup of a single namespace variable, whereas the array layout can suffer some time penalty as it uses
// a binary chop algorithm and so may access many namespace variables.

"" println
now time::()
j var
j 1233 =
i 0 =
{ i 10000 < } {
  i primesInASieve isprime primes::() pop
  j j 6 + =
  i++
} while
now time::() swap - 1000.0 / "Sieve primality check of 10,000 numbers took %0.3f seconds\n" printf

now time::()
j 1233 =
i 0 =
{ i 10000 < } {
  i primesInAnArray isprime primes::() pop
  j j 6 + =
  i++
} while
now time::() swap - 1000.0 / "Array primality check of 10,000 numbers took %0.3f seconds\n" printf

// And finally, Euler's totient function.

"" println
now time::()
i 2 =
{ i 10000 < } {
  i primesInASieve phi primes::() pop
  i++
} while
now time::() swap - 1000.0 / "10,000 calls to phi primes::() with a sieve type took %0.3f seconds\n" printf

now time::()
i 2 =
{ i 10000 < } {
  i primesInAnArray phi primes::() pop
  i++
} while
now time::() swap - 1000.0 / "10,000 calls to phi primes::() with an array type took %0.3f seconds\n" printf



"" println
micro version:: primes:: minor version:: primes:: major version:: primes:: "Primes library version %d.%d.%d\n" printf



// Closing comment.
//
// Always use the sieve layout unless you are making heavy use of non-sequential access.
