#!/usr/local/bin/shale

// Everything in the examples/ directory is both readable and executable,
// assuming you've installed the shale executable, that is. I'd suggest you
// read each file first before executing the file.

// In this file I'll be discussing, very broadly
//  - how a reverse polish notation language is used
//  - variables
//  - assignments
//  - pointers
//  - if statements
//  - while loops
//  - functions
// Each of these, from variables down, have their own example file where
// I give more detail.

// shale is a reverse-polish notation language, meaning you don't write
// things like:
//
//  (1 + 2) * 3
//
// Instead you must think about the order in which these operations
// are to be done. In the example above you must add 1 and 2, then multiply
// the result by 3. And you can't just "add 1 and 2", you need to
// get 1, then get 2, add them together, then get 3 and do the multiplication.
//
// Easiest way to think about this is to picture yourself doing this
// with pencil and paper. The first thing you have to do is write down the
// two numbers that you are going to add together, then you add them,
// then you write down the multiplier, then do the multiplication.
//
// if (1 + 2) * 3 seems a little trite, imagine doing this on paper:
//
//  (3.1415926 + 2.7182818) * 1.6180339
//
// You'd have to write the numbers down before doing the addition, and then
// write the multiplier down before doing the multiplication.
//
// And so it is with shale. You have to "write down" the operands
// before you call the operator.
//
// Let's start with a simple (1 + 2) * 3 example, and print the result:

1 2 + 3 * println

// If you run this script then 9 will be the first line output.
//
// How does this work? shale gives you a stack that you can put things on,
// like the "1" and "2", and a bunch of operators, like "+" and "println",
// that take the contents of the stack, perform their function, and possibly
// leave their results on the stack.
//
// In the case of the "+" operator, it take the top two elements off the stack,
// adds them together, and puts the result on the stack. Similarly with the "3" and "*" operator.
// The "println" operator takes the top element off the stack and prints it,
// with a newline.
//
// Another way to do this calculation is to push all the numbers on the stack
// before calling the operators

3 1 2 + * println

// So, in a nutshell, you now know all the basics of shale - there is a stack you
// put things on, and operators you call that take those stacked items and do stuff
// with them, possibly leaving a result on the stack.
//
// I am, of course, glossing over a lot of detail here. shale can do:
//  variables
//  assignments
//  pointers
//  if statements
//  while loops
//  functions
//  arrays, single- and multi-dimentional
//  conditional logical AND and OR operators
//
// Yeah, I know you're saying all programming languages give you these features.
//
// Do these other programming languages allow you to create new code
// on-the-fly within the script? Probably not. But I digress. Lets move on.



// Variables.
//
// Variables are created by pushing the name of a variable on the stack
// and calling the var operator

i var

// This creates the variable called i. Simple variables start with an alphabetic
// character followed by zero or more alphanumeric or underscore characters.
// shale variables are explained in more detail in the variables example file.



// Assignments.
//
// To assign a value to a variable, push the name of the variable and the value
// on the stack and call the = operator

i 123 =

// and to print the value of i you could do

i println

// (123 will be the third output line of this script).
//
// It's worth pointing out that there's something going on here, because
// in both cases above, the assignment and the println, i is pushed on the stack,
// and yet they are treated differently, one as the destination of the value 123,
// and one as the value 123. In all cases, when you push the name of a variable
// on the stack, you are pushing the name, not its value, on the stack.
// It is up to the operator that you've called to use either the name or its value
// based on the operator's context. That's why the assignment took
// the name and used it to assign a value, and the println took the name's value.
//
// Back to assignment. Lets say we have another variable j

j var
j 987 =

// and then we do

i j =
i println

// (987 will be output). In this case the assignment operator will take
// the i on the stack as a name, and the j as its value.
//
// I'll mention pointers here quickly. They are explained in more detail in
// the pointers example file. To create a pointer you use the pointer assignment
// operator, and to access the thing pointed to you use the dereference operator.

i j &=        // the pointer assignment operator. i is a pointer to j
i-> println   // the pointer dereference operator. 987 will be output
i-> 3.141 =   // another pointer dereference. this will assign 3.141 to j
j println     // 3.141 will be output



// If statements.
//
// Here's where we get into something cool. You've seen how you can push
// numbers and names on the stack (strings as well, like "abc123"), you can
// also push a code fragment on the stack. The code isn't executed,
// just pushed on the stack as a single object.
//
// You push a code fragment on the stack by enclosing it within curly braces
//
//  { 1 2 + println }
//
// There are a couple of operators that will execute a code fragment on the stack,
// and the first of these we'll look at is the if operator.
//
// The if operator needs three things on the stack. The first thing you
// push on the stack is a boolean, the second is a code fragment which will
// be executed if the boolean is true, and the third is a code fragment
// to be executed if the boolean is false. Then you call the if operator.
//
// Here's an if operator example, using the boolean less-than operator.

i 99 =        // assign i to 99
i 100 < {     // the boolean and opening the then-code fragment
  "i is less than 100" println
} {           // closing the then fragment and opening the else-code fragment
  "i is greater than or equal to 100" println
} if          // closing the else fragment and calling the if operator

// There is also an ifthen operator where you only specify the then-code fragment.

i j != {
  "i and j are different" println
} ifthen

// A quick note on booleans. shale follows the convention of a boolean being a number,
// either an integer or floating point, where 0 (zero) is false, and not zero is true.



// While loops.
//
// The while operator expects two code fragments on the stack. The first you
// push on is a fragment which, when executed, leaves a boolean on the stack,
// and the second you push on is the body of the while. The boolean fragment
// will be executed, and if the resulting boolean it leaves on the stack is true,
// then the body fragment will be executed. And so it goes on until the boolean
// fragment leaves false on the stack.

i 0 =                   // initialise the loop counter.
{ i 10 < } {            // boolean fragment and opening the body fragment
  i "i = %d\n" printf   // do something interesting
  i++
} while

// You can also use the "break" operator within the body fragment to terminate
// the while loop just like you can in C-like languages.

"break example" println
i 0 =
{ i 10 < } {
  i 5 == {
    break               // terminates the enclosing while loop.
  } ifthen
  i "i = %d\n" printf
  i++
} while



// Functions.
//
// This is the last feature I'll be discussing here. To create a
// function, first create a variable, then assign a code fragment
// to it.

f var
f {
  1 2 + 3 * println
} =

// To execute a function use the execute operator, which is the "execute" keyword or,
// alternatively, ().

f execute   // one form of the execute operator
f()         // another, more familiar, form

// This isn't really a function in the C sense of the word, but rather a code fragment
// assigned to a variable. For many applications this kind of "function" will do fine.
//
// However, there is a shortcoming to this kind of "function" - there is no
// return statement. This limitation may be fine for smaller functions, but in the
// end you'll need, or want, a return statement, so here it is:
//
// The "function" operator. This is a no-op in that is does nothing to any variable
// or the stack. What it does do is tag the code fragment in such a way so that the
// "return" operator will exit the "function" code fragment.

pf var
pf { function       // tag this code fragment as a function
  i 100 < {
    "i is less than 100, and returning" println
    -1
    return          // exit the enclosing tagged fragment
  } {
    i > 200 {
      "i is greater than 200, and returning" println
      -2
      return        // exit the enclosing tagged fragment
    } {
      "i is within bounds" println
    } if
  } if

  0
} =

pf() "pf() returned %d\n" printf

// A code fragment can be tagged as being a "function", and any return operator
// within this code fragment or any fragments executed by this code fragment
// will exit the function. Kind of like a break exits an enclosing while loop,
// a return will exit an enclosing "function" code fragment.
//
// There's more info on this in the "functions" example file.

// And as a final note to the if, ifthen, while and = operators, they can also take a
// variable which has been assigned to a code fragment. For example:

then var
then { "i is less than 100" } =
else var
else { "i is greater or equal to 100" } =
i 100 < then else if println



// Closing comment.
//
// The important takeaway with shale is to push things on the stack in the order expected
// by the operator you're about to call.
//
// For the full list of operators, do
//
//  shale -s
//
// I'd suggest that the next examples you check out are
//  variables     and
//  namespaces
// After that just follow your nose.



// PS. Comments are introduced by // and extend to the end of the line,
// as you see in this file, or by #, also used in this file. Take your pick.



// PPS. shale plays nice when run interactively, which is great
// for trying things out. Simply run shale with no arguments.
