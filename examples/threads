#!/usr/local/bin/shale

// Threads are implemented in the thread library

thread library

// The thread library provides POSIX thread support through
// the following functions
//
//  create thread::()       create a new thread
//  mutex thread::()        create a new mutex
//  lock thread::()         lock a mutex
//  unlock thread::()       unlock a murex
//  semaphore thread::()    create a new semaphore
//  wait thread::()         wait on a semaphore
//  post thread::()         post to (wake up) a semaphore



// Mutexes.

// Creating mutexes.

// To create a mutex you need to give it a name, which can be
// a number (integer or floating point), a string or a variable name.
// Here are some mutexes.

123 mutex thread::()
3.141 mutex thread::()
"Joe Bloggs" mutex thread::()
stop mutex thread::()
5 8:: a:: mutex thread::()

// All mutexes are stored under the mutex:: thread:: namespace,
// so you'll see them appear in the btree output (shown a little later).
// The value of each mutex is of no importance to the shale script.
// The value is the address of the dynamically allocated mutex.
// Change its value and disaster awaits.

// To lock a mutex, do

123 lock thread::()

// And to unlock one:

123 unlock thread::()



// Semaphores.

// Creating a semaphore.

// Similar to mutexes, semaphores need a name.
// All of the following are valid sempahores.

123 semaphore thread::()
3.141 semaphore thread::()
"Joe Bloggs" semaphore thread::()
ready semaphore thread::()
5 8:: a:: semaphore thread::()

// All semaphores are stored under the semaphore:: thread:: namespace.
// And just like mutexes, the value of each semaphore is the address
// of the dynamically allocated semaphore.

// Waiting on and releasing a semaphore.

// To wait on a semaphore, push the semaphore's name and call wait thread::()
//
//  123 wait thread::()
//
// You can see these in section below.

// To release a semaphore, push the semaphore's name and call post thread::()
//
//  123 post thread::()



// Here you'll see the mutexes and semaphores stored in their
// respective namespace variables.

btree



// Creating a thread, and bringing it all together.

// To create a thread you pass in a function (or a code fragment) and an argument.
// The argument can be any object and will be pushed on the new thread's stack.
// The thread will run until the function exits. The thread has a completely separate stack
// and simple variable stack. You can synchronise the threads by using semaphores,
// and you can lock critical pieces of data structure stored in namespace variables with mutexes.
// Namespace variables are the only means by which different threads can exchange data.

// In the following contrived example, the main thread creates three new threads and then
// waits on a semaphore inside a loop. Each new thread takes an argument which
// is a namespace variable, the value of which is the number of milliseconds to sleep.
// It then reinitialises that variable to 0 and enters a loop where it sleeps for the given time,
// increments the namespace variable value then wakes up the main thread. The main thread
// prints the value of each namespace variable and terminates after 20 iterations.
// Each thread uses a mutex to mediate access to their namespace variable across
// all threads while the value is changed.

// This uses sleep time::() to introduce a bit of delay, so we need the time library.

time library

threadCode var
threadCode {
  p var p swap &=
  delay var

  delay p-> =               // this is thread-safe because this is the only thread that changes p->

  stop lock thread::()      // prevent access while the value is changed
  p-> 0 =
  stop unlock thread::()    // unlock

  { true } {
    delay sleep time::()

    stop lock thread::()    // prevent access while the value is changed
    p->++
    stop unlock thread::()  // unlock

    ready post thread::()   // wake up the main thread
  } while
} =

1 ns:: var
1 ns:: 1000 =
2 ns:: var
2 ns:: 1471 =
3 ns:: var
3 ns:: 2873 =

1 ns:: threadCode create thread::()
2 ns:: threadCode create thread::()
3 ns:: threadCode create thread::()

"" println
i var
i 0 =
{ i 20 < } {
  ready wait thread::()

  stop lock thread::()
  3 ns:: 2 ns:: 1 ns:: "thread 1: %2d   thread 2: %2d   thread 3: %2d\n" printf
  stop unlock thread::()

  i++
} while



// Closing comment.

// Any data that is changed and read by different threads needs a mutex lock/unlock surrounding it.



micro version:: thread:: minor version:: thread:: major version:: thread:: "\nThread library version %d.%d.%d\n" printf
