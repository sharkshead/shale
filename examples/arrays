#!/usr/local/bin/shale

// Arrays in shale are created using namespace variables.
// For a full discussion of namespace variables see the
// "namespaces" example. To recap, a namespace variable consists
// of an index and a name, then call the :: operator
//
//  i ns::
//
// which is the variable i in the namespace ns.
//
// They can be nested, like
//
//  i a:: b::
//
// which is i in namespace a, which in turn is in namespace b.
//
// The index and name can also be numbers or strings
//
//  0 a::                   <-- equivalent to a[0]
//  5 8:: a::               <-- a[8][5]
//  i.value a::             <-- a[i]
//  j.value i.value:: a::   <-- a[i][j]
//
// You create and use namespace variables just like simple variables.
//
//  i ns:: var
//  i ns:: 123 =
//  i ns:: println
//  hw funcs:: var
//  hw funcs:: { "Hello, World!" println } =
//  hw funcs::()
//  "Joe Bloggs" dob:: var
//  "Joe Bloggs" dob:: 1980 3 25 "%d/%d/%d" sprintf =
//
// Namespace variables are global and are not tied to
// any code fragment. When you create a namespace variable it
// persists until the end of the shale script.
//
// You can roll your own arrays or use the helper functions
// in the array library. First we'll discuss rolling your own.



// Rolling your own arrays.

// The examples above give you a pretty good start for handling your
// own arrays. There are a couple of considerations, though.
//
// First, you must create your array elements with the var operator
// before you use the element. If your array has a well known
// size, like a chess board for example, you could start by creating
// all the entries

i var
j var
i 0 =
{ i 8 < } {
  j 0 =
  { j 8 < } {
    i.value j.value:: board:: var
    i.value j.value:: board:: 0 =
    j++
  } while
  i++
} while

// and then you can happily assign values to, or retrieve values from,
// any element.
//
// If, on the other hand, you're dealing with a sparse array where the
// exact size and index of each element is not known at the time of
// writing your script, then you need to check whether the element
// you're about the acccess is actually there. The three operators
// defined, initialised and initialized help out here.
//
// Let's say you're about to add the value of "i" to the element "j"
// in an array. You need to check that element "j" exists and has an
// appropriate value before you add "i"

i 100 =
j 97 =
j.value a:: defined not {
  j.value a:: var
  j.value a:: 0 =
} ifthen
j.value a:: j.value a:: i + =

// The above says that if a[j] is not defined then create it and
// assign it to 0. Then proceed to add i to a[j].
//
// Another consideration is to keep track of the count of elements
// in a list as you're generating and adding new elements to the list.
// Create a "count" element

count list:: var
count list:: 0 =

// and then to add a new element to the end of the list

count list:: value list:: var
count list:: value list:: i =
count list::++

// To explain this a little, the first line reads as
//  count list::    <-- the variable
//  value           <-- get the value of the variable
//  list::          <-- we now have the variable (not the value) list[count] on the stack
//  var             <-- create list[count]
// ditto the next line, although this time we're assigning list[count] = i
//  count list::++  <-- increment the counter
//
// There are many ways of slicing and dicing arrays in shale. What is presented
// here is just a single example.



// The array library helper functions.
//
// First, load the array library

array library

// The array library provides
//
//  create array::()
//  scooch array::()
//  get array::()
//  set array::()
//
// Create and scooch are to support fully populated arrays, where every index
// between 0 and maximum - 1 is created, and get and set are geared towards sparse arrays,
// where you only create the indicies as needed.

// Fully populated arrays.
//
// To create a fully populated array with create array::() you push the
// initial value on the stack, then the count, then the array name

123 10 xyz create array::()

// This creates the equivalent of xyz[0] through xyz[9], all with the initial value of 123.
//
// You can then go ahead and use this like an array by refering to, for exmple

5 xyz:: println
i 5 =
i.value xyz:: 987 =
5 xyz:: println     // 987

// The scooch function moves all the entries along one and assigns a new value to the first element.

"abc123" xyz scooch array::()
3.141 xyz scooch array::()

// Now xyz[0] is 3.141, xyz[1] is "abc123" and xyz[7] is 987
//
// Arrays created with create array::() have a special entry called "_$"
// that contains the number of entries in the array (one of the arguments given
// when you created the array). You can use this to loop through the array elements

i 0 =
{ i "_$" xyz:: < } {
  i.value xyz:: i "xyz[%d] = %p\n" printf
  i++
} while

// Sparse arrays.
//
// A sparse array is one where you don't create every entry from 0 through to maximum - 1.
// Indeed, a sparse array doesn't need to use integers as indicies. It can also use
// float point numbers and strings.
//
// There's no setup required for a sparse array, you just use the set and get functions.

"hlvb" fq "Hasta la vista, baby" set array::()
"oiar" fq "Only in a rerun" set array::()
"tgte" fq "These go to eleven" set array::()

// This has set the "hlvb", "oiar" and "tgte" indicies in the "fq" sparse array
// with the given values.
//
// Getting an entry from a sparse array is a little more involved than a fully populated array.
//
// If the entry exists and has a value then get array::() pushes the value and then true
// on the stack, and if the entry does not exist or is not initialised it pushes false
// on the stack.

"hlvb" fq get array::() {
  println
} {
  "hlvb does not exist" println
} if

"ibb" fq get array::() {
  println
} {
  "ibb does not exist" println
} if



// The array library version number.
micro version:: array:: minor version:: array:: major version:: array:: "Array library version %d.%d.%d\n" printf



// Closing comment.

// There are a couple of ways the above code can be reduced and sped up.
// Not necessarily made easier to understand, but reduced and sped up.
//
// For example, the code examples given in the namespaces recap above:
//
//  i ns:: var
//  i ns:: 123 =
//  hw funcs:: var
//  hw funcs:: { "Hello, World!" println } =
//  "Joe Bloggs" dob:: var
//  "Joe Bloggs" dob:: 1980 3 25 "%d/%d/%d" sprintf =
//
// can be reduced to
//
//  i ns:: dup var 123 =
//  hw funcs:: dup var { "Hello, World!" println } =
//  "Joe Bloggs" dob:: dup var 1980 3 25 "%d/%d/%d" sprintf =
//
// by using the dup operator, which duplicates the top of the stack.
//
// And in the chess board example, elements were created like this
//
//  i.value j.value:: board:: var
//  i.value j.value:: board:: 0 =
//
// which can be reduced to
//
//  i.value j.value:: board:: dup var 0 =
//
// And this code
//
//  j.value a:: var
//  j.value a:: 0 =
//
// in the example of adding a value to an element, can be simplified to
//
//  j.value a:: dup var 0 =
//
// Similarly for the case of adding a new element to the end of a list, the lines
//
//  count list:: value list:: var
//  count list:: value list:: i =
//
// can be reduced to
//
//  count list:: value list:: dup var i =
