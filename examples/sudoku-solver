#!/usr/local/bin/shale

// This solves a classic sudoku with standard row/column/box constraints.
// It is based on the python code from the Computerphile video https://www.youtube.com/watch?v=G_UYXzGuqvM
// The sudoku example from this video is used below.

printGrid var
printGrid {
  r var
  c var

  r 0 =
  { r 9 < } {
    c 0 =
    { c 9 < } {
      r.value c.value:: grid:: dup 0 == { pop " ." } { " %d" } if printf
      c c 1 + =
    } while
    "" println
    r r 1 + =
  } while
} =

setRow var
setRow {
  8$ var 8$ swap =
  7$ var 7$ swap =
  6$ var 6$ swap =
  5$ var 5$ swap =
  4$ var 4$ swap =
  3$ var 3$ swap =
  2$ var 2$ swap =
  1$ var 1$ swap =
  0$ var 0$ swap =
  r var r swap =
  i var

  i 0 =
  { i 9 < } {
    r.value i.value:: grid:: defined not {
      r.value i.value:: grid:: var
    } ifthen
    r.value i.value:: grid:: i.value$ =
    i i 1 + =
  } while
} =

possible var
possible {
  n var n swap =
  c var c swap =
  r var r swap =
  i var
  j var
  r0 var
  c0 var
  ret var

  ret true =

  i 0 =
  { i 9 < } {
    r.value i.value:: grid:: n == {
      ret false =
      break
    } ifthen
    i i 1 + =
  } while

  ret {
    i 0 =
    { i 9 < } {
      i.value c.value:: grid:: n == {
        ret false =
        break
      } ifthen
      i i 1 + =
    } while

    ret {
      r0 r 3 / 3 * =
      c0 c 3 / 3 * =
      i 0 =
      { i 3 < } {
        j 0 =
        { j 3 < } {
          r0 i + c0 j +:: grid:: n == {
            ret false =
            break
          } ifthen
          j j 1 + =
        } while
        ret not { break } ifthen
        i i 1 + =
      } while
    } ifthen
  } ifthen

  ret.value
} =

solve var
solve {
  r var
  c var
  n var
  prt var

  prt true =
  r 0 =
  { r 9 < } {
    c 0 =
    { c 9 < } {
      r.value c.value:: grid:: 0 == {
        n 1 =
        { n 10 < } {
          r.value c.value n.value possible() {
            r.value c.value:: grid:: n =
            solve()
            r.value c.value:: grid:: 0 =
          } ifthen
          n n 1 + =
        } while
        prt false =
        break
      } ifthen
      c c 1 + =
    } while
    prt not { break } ifthen
    r r 1 + =
  } while

  prt {
    "" println
    printGrid()
  } ifthen
} =

// As mentioned above, this is the example taken from the Computerphile video.
0 5 3 0 0 7 0 0 0 0 setRow()
1 6 0 0 1 9 5 0 0 0 setRow()
2 0 9 8 0 0 0 0 6 0 setRow()
3 8 0 0 0 6 0 0 0 3 setRow()
4 4 0 0 8 0 3 0 0 1 setRow()
5 7 0 0 0 2 0 0 0 6 setRow()
6 0 6 0 0 0 0 2 8 0 setRow()
7 0 0 0 4 1 9 0 0 5 setRow()
8 0 0 0 0 8 0 0 7 9 setRow()

// From https://www.youtube.com/watch?v=MXUgYxHmKq4&t=0s
// This is a Cracking The Cryptic video and takes considerably longer than the one above.
// 0 0 6 8 0 0 0 0 1 3 setRow()
// 1 0 0 0 9 0 1 0 0 0 setRow()
// 2 0 0 0 0 0 8 0 0 4 setRow()
// 3 0 1 0 0 4 0 5 0 0 setRow()
// 4 0 3 0 0 0 9 0 0 0 setRow()
// 5 0 8 5 0 0 0 0 7 0 setRow()
// 6 0 2 0 0 0 7 3 0 0 setRow()
// 7 0 0 0 0 9 4 0 0 6 setRow()
// 8 4 0 0 0 6 0 0 0 0 setRow()

"Initial grid" println
printGrid()

solve()
