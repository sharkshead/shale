#!/usr/local/bin/shale

// This implements a Bulls and Cows game player.
//
//  Bulls and Cows is described here: https://en.wikipedia.org/wiki/Bulls_and_Cows
//
// This is the reverse of the bulls-n-cows script in that you choose a
// number and the script tries to guess it based on the bulls and cows
// scores you enter.
//
// Here's a quick summary of this Bulls and Cows game player.
//
// You choose a 4-digit number from the digits 1 to 9, no zero,
// with no repeating digits, and the script's task is to guess that number.
// The script offers a guess, and you score that guess by reporting its
// number of bulls and cows.
// 
// A bull is where a guessed digit is in its correct position
// within your 4-digit number.
//
// A cow is where the guessed digit is correct, but it is not
// in the correct position.
//
// Based on the cows and bulls score you enter the script will try to guess
// your number.

maths library
file library
string library

lista var
listb var
firstTimeThrough var
guess var
guess0 var
guess1 var
guess2 var
guess3 var
bulls var
cows var

init dup var {
  count a:: var
  count b:: var
} =

randomDigit dup var {
  random maths::() 18 >> 9 % 1 +
} =

makeGuess dup var {
  firstTimeThrough {
    guess0 randomDigit() =
    guess1 randomDigit() =
    { guess1 guess0 == } { guess1 randomDigit() = } while
    guess2 randomDigit() =
    { guess2 guess0 == guess2 guess1 == or } { guess2 randomDigit() = } while
    guess3 randomDigit() =
    { guess3 guess0 == guess3 guess1 == guess3 guess2 == or or } { guess3 randomDigit() = } while
    guess guess3 1000 * guess2 100 * guess1 10 * guess0 + + + =
  } {
    i var

    i random maths::() count lista->:: % =
    guess i.value lista->:: value =
    guess0 guess 10 % =
    guess1 guess 10 / 10 % =
    guess2 guess 100 / 10 % =
    guess3 guess 1000 / =
  } if
} =

getAnswer dup var {
  stdin file:: fgets file::() {
    atoi string::()
  } {
    0 exit
  } if
} =

getScore dup var {
  haveBulls dup var false =
  haveCows dup var false =
  ans var

  { haveBulls not } {
    "Bulls: " print
    ans getAnswer() =
    ans 0 < ans 4 > and {
      "Please try again" println
    } {
      bulls ans =
      haveBulls true =
    } if
  } while

  { haveCows not } {
    "Cows: " print
    ans getAnswer() =
    ans 0 < ans 4 > and {
      "Please try again" println
    } {
      cows ans =
      haveCows true =
    } if
  } while
} =

check dup var {
  d0 dup var swap =   // units
  d1 dup var swap =
  d2 dup var swap =
  d3 dup var swap =   // thousands
  b dup var 0 =
  c dup var 0 =

  d0 guess0 == { b++ } { d0 guess1 == { d0 guess2 == { d0 guess3 == } or } or { c++ } ifthen } if
  d1 guess1 == { b++ } { d1 guess0 == { d1 guess2 == { d1 guess3 == } or } or { c++ } ifthen } if
  d2 guess2 == { b++ } { d2 guess0 == { d2 guess1 == { d2 guess3 == } or } or { c++ } ifthen } if
  d3 guess3 == { b++ } { d3 guess0 == { d3 guess1 == { d3 guess2 == } or } or { c++ } ifthen } if

  b bulls >= c cows >= and
} =

add dup var {
  n dup var swap =

  n guess != {    // never put our own guess back in the list.
    i var

    i count listb->:: =
    i.value listb->:: defined not {
      i.value listb->:: var
    } ifthen

    i.value listb->:: n =
    count listb->::++
  } ifthen
} =

filterList dup var {
  a var
  b var
  c var
  d var
  bc var

  // A score of 0/0 is really powerful.
  bc bulls cows + =

  count listb->:: 0 =
  firstTimeThrough {
    a 1 =
    { a 10 < } {
      bc 0 > { a guess0 != { a guess1 != { a guess2 != { a guess3 != } and } and } and } or {
        b 1 =
        { b 10 < } {
          b a != { bc 0 > { b guess0 != { b guess1 != { b guess2 != { b guess3 != } and } and } and } or } and {
            c 1 =
            { c 10 < } {
              c a != { c b != { bc 0 > { c guess0 != { c guess1 != { c guess2 != { c guess3 != } and } and } and } or } and } and {
                d 1 =
                { d 10 < } {
                  d a != { d b != { d c != { bc 0 > { d guess0 != { d guess1 != { d guess2 != { d guess3 != } and } and } and } or } and } and } and {
                    a b c d check() {
                      a 1000 * b 100 * c 10 * d + + + add()
                    } ifthen
                  } ifthen
                  d++
                } while
              } ifthen
              c++
            } while
          } ifthen
          b++
        } while
      } ifthen
      a++
    } while
  } {
    i var
    j var
    n var

    bc 0 == {
      i 0 =
      { i count lista->:: < } {
        n i.value lista->:: =
        a n 1000 / =
        a guess0 != { a guess1 != { a guess2 != { a guess3 != } and } and } and {
          b n 100 / 10 % =
          b guess0 != { b guess1 != { b guess2 != { b guess3 != } and } and } and {
            c n 10 / 10 % =
            c guess0 != { c guess1 != { c guess2 != { c guess3 != } and } and } and {
              d n 10 % =
              d guess0 != { d guess1 != { d guess2 != { d guess3 != } and } and } and {
                a.value b.value c.value d.value check() {
                  n.value add()
                } ifthen
              } ifthen
            } ifthen
          } ifthen
        } ifthen
        i++
      } while
    } {
      i 0 =
      { i count lista->:: < } {
        n i.value lista->:: =
        n 1000 / n 100 / 10 % n 10 / 10 % n 10 % check() {
          n.value add()
        } ifthen
        i++
      } while
    } if
  } if
} =

solve dup var {
  t var
  f var
  n var

  lista a &=
  listb b &=
  firstTimeThrough true =
  count a:: 0 =
  count b:: 0 =

  n 1 =
  f 1 =
  { f } {
    makeGuess()
    guess0 guess1 guess2 guess3 n "\nGuess %d: %d %d %d %d\n" printf
    getScore()
    bulls 4 == {
      "\nWooHoo, I won!\n" printf
      break
    } ifthen
    filterList()
    f count listb->:: =

    t lista =
    lista listb =
    listb t =
    firstTimeThrough false =
    n++
  } while

  count lista->:: 0 == {
    "I've run out of numbers to choose from." println
  } ifthen
} =

init()
{ true } {
  solve()
} while
