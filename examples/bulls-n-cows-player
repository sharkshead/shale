#!/usr/local/bin/shale

// This implements a Bulls and Cows game player.
//
// Bulls and Cows is described here: https://en.wikipedia.org/wiki/Bulls_and_Cows
//
// This is the reverse of the bulls-n-cows script in that you choose a
// number and the script tries to guess it based on the bulls and cows
// scores you enter.
//
// Here's a quick summary of this Bulls and Cows game player.
//
// You choose a 4-digit number from the digits 1 to 9, no zero,
// with no repeating digits, and the script's task is to guess that number.
// The script offers a guess, and you score that guess by reporting its
// number of bulls and cows.
// 
// A bull is where a guessed digit is in its correct position
// within your 4-digit number.
//
// A cow is where the guessed digit is correct, but it is not
// in the correct position.
//
// Based on the cows and bulls score you enter the script will try to guess
// your number.
//
// You can see some of the internal numbers as the game progresses if you add
//  stats=true
// to the command line. If you want to see the list of numbers that it has
// to choose from, add this
//  stats=true list=true
// Be prepared, the starting list contains 3024 numbers.

maths library
file library
string library

lista var
listb var
guess var
guess0 var
guess1 var
guess2 var
guess3 var
bulls var
cows var
showStats var
showList var

init dup var {
  stats defined {
    showStats stats =
  } {
    showStats false =
  } if
  list defined {
    showList list =
  } {
    showList false =
  } if

  count a:: var
  count b:: var
  lista a &=
  listb b &=
  count guess:: var
} =

randomDigit dup var {
  random maths::() 18 >> 9 % 1 +
} =

makeGuess dup var {
  i var

  i random maths::() count lista->:: % =
  guess i.value lista->:: value =
  guess0 guess 10 % =
  guess1 guess 10 / 10 % =
  guess2 guess 100 / 10 % =
  guess3 guess 1000 / =

  i count guess:: =
  i.value guess:: defined not {
    i.value guess:: var
    i.value bulls:: var
    i.value cows:: var
  } ifthen
  i.value guess:: guess =
} =

getAnswer dup var {
  stdin file:: fgets file::() {
    atoi string::()
  } {
    0 exit
  } if
} =

getScore dup var {
  haveBulls dup var false =
  haveCows dup var false =
  ans var
  i var

  { haveBulls not } {
    "Bulls: " print
    ans getAnswer() =
    ans 0 < ans 4 > and {
      "Please try again" println
    } {
      bulls ans =
      haveBulls true =
    } if
  } while

  { haveCows not } {
    "Cows: " print
    ans getAnswer() =
    ans 0 < ans 4 > and {
      "Please try again" println
    } {
      cows ans =
      haveCows true =
    } if
  } while

  i count guess:: =
  i.value bulls:: bulls =
  i.value cows:: cows =
  count guess::++
} =

check dup var {
  d0 dup var swap =   // units
  d1 dup var swap =
  d2 dup var swap =
  d3 dup var swap =   // thousands
  b dup var 0 =
  c dup var 0 =

  d0 guess0 == { b++ } { d0 guess1 == { d0 guess2 == { d0 guess3 == } or } or { c++ } ifthen } if
  d1 guess1 == { b++ } { d1 guess0 == { d1 guess2 == { d1 guess3 == } or } or { c++ } ifthen } if
  d2 guess2 == { b++ } { d2 guess0 == { d2 guess1 == { d2 guess3 == } or } or { c++ } ifthen } if
  d3 guess3 == { b++ } { d3 guess0 == { d3 guess1 == { d3 guess2 == } or } or { c++ } ifthen } if

  b bulls >= c cows >= and
} =

add dup var {
  n dup var swap =

  n guess != {    // never put our own guess back in the list.
    i var

    i count listb->:: =
    i.value listb->:: defined not {
      i.value listb->:: var
    } ifthen

    i.value listb->:: n =
    count listb->::++
  } ifthen
} =

fillA dup var {
  a var
  b var
  c var
  d var
  n var

  n 0 =
  a 1 =
  { a 10 < } {
    b 1 =
    { b 10 < } {
      b a != {
        c 1 =
        { c 10 < } {
          c a != { c b != } and {
            d 1 =
            { d 10 < } {
              d a != { d b != { d c != } and } and {
                n.value lista->:: defined not {
                  n.value lista->:: var
                } ifthen
                n.value lista->:: a 1000 * b 100 * c 10 * d + + + =
                n++
              } ifthen
              d++
            } while
          } ifthen
          c++
        } while
      } ifthen
      b++
    } while
    a++
  } while

  count lista->:: n =
} =

filterList dup var {
  a var
  b var
  c var
  d var
  i var
  j var
  n var
  bc var

  // A score of 0/0 is really powerful.
  bc bulls cows + =

  count listb->:: 0 =
  bc 0 == {
    i 0 =
    { i count lista->:: < } {
      n i.value lista->:: =
      a n 1000 / =
      a guess0 != { a guess1 != { a guess2 != { a guess3 != } and } and } and {
        b n 100 / 10 % =
        b guess0 != { b guess1 != { b guess2 != { b guess3 != } and } and } and {
          c n 10 / 10 % =
          c guess0 != { c guess1 != { c guess2 != { c guess3 != } and } and } and {
            d n 10 % =
            d guess0 != { d guess1 != { d guess2 != { d guess3 != } and } and } and {
              a.value b.value c.value d.value check() {
                n.value add()
              } ifthen
            } ifthen
          } ifthen
        } ifthen
      } ifthen
      i++
    } while
  } {
    i 0 =
    { i count lista->:: < } {
      n i.value lista->:: =
      n 1000 / n 100 / 10 % n 10 / 10 % n 10 % check() {
        n.value add()
      } ifthen
      i++
    } while
  } if
} =

solve dup var {
  t var
  f var
  n var

  count lista->:: 0 =
  count listb->:: 0 =
  count guess:: 0 =
  fillA()

  n 1 =
  f 1 =
  { f } {
    makeGuess()
    "" println
    showStats { count lista->:: 0 > } and {
      count lista->:: 1 == { "y" } { "ies" } if count lista->:: "%d entr%s to choose from\n" printf
      showList count lista->:: 3024 != and {
        i dup var 0 =
        { i count lista->:: < } {
          i.value lista->:: " %d" printf
          i 32 % 31 == { "" println } ifthen
          i++
        } while
        i 32 % 0 != { "" println } ifthen
      } ifthen
    } ifthen
    guess0 guess1 guess2 guess3 n "Guess %d: %d %d %d %d\n" printf
    getScore()
    bulls 4 == {
      "\nWooHoo, I won!\n" printf
      break
    } ifthen
    filterList()
    f count listb->:: =

    t lista =
    lista listb =
    listb t =
    n++
  } while

  count lista->:: 0 == {
    d0 var
    d1 var
    d2 var
    d3 var
    i var
    g var
    b var
    c var
    f dup var true =


    "" println
    "I've run out of numbers to choose from." println
    ""
    "What number were you thinking of (no spaces): " print
    i getAnswer() =
    i 0 > {
      d0 i 10 % =
      d1 i 10 / 10 % =
      d2 i 100 / 10 % =
      d3 i 1000 / =

      "" println
      "Guess   Bulls Cows First error" println
      i 0 =
      { i count guess:: < } {
        i.value cows:: i.value bulls:: i.value guess:: 10 % i.value guess:: 10 / 10 % i.value guess:: 100 / 10 % i.value guess:: 1000 / "%d %d %d %d %5d %4d" printf

        g i.value guess:: =
        guess0 g 10 % =
        guess1 g 10 / 10 % =
        guess2 g 100 / 10 % =
        guess3 g 1000 / =
        b 0 =
        c 0 =
        d0 guess0 == { b++ } { d0 guess1 == { d0 guess2 == { d0 guess3 == } or } or { c++ } ifthen } if
        d1 guess1 == { b++ } { d1 guess0 == { d1 guess2 == { d1 guess3 == } or } or { c++ } ifthen } if
        d2 guess2 == { b++ } { d2 guess0 == { d2 guess1 == { d2 guess3 == } or } or { c++ } ifthen } if
        d3 guess3 == { b++ } { d3 guess0 == { d3 guess1 == { d3 guess2 == } or } or { c++ } ifthen } if
        f { b i.value bulls:: != { c i.value cows:: != } or } and {
          c b " <-- should be %d / %d" printf
          f false =
        } ifthen

        "" println
        i++
      } while
    } ifthen
  } ifthen
} =

init()
{ true } {
  solve()
} while
