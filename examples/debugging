#!/usr/local/bin/shale

// There are three operators that might help you debug
// a shale script: stack btree debug



// Printing the stack: stack

"stack:" println
{ "a code fragment" } 123 "abc123" 3.141 aVariable i a:: b::
stack

// This prints the contents of the stack, top-of-stack
// first through to the end, and does not change anything.
// At the moment it can't print code fragments, but it can
// print names, numbers and strings.



// Printing namespaces: btree

"" println
"btree:" println
i ns:: var
i ns:: 123 =
j ns:: var
5 8:: a:: var
5 8:: a:: 987 =
btree

// All namespace variables are stored in a BTree (as opposed
// to simple variables that have a separate variable stack).
// The btree operator prints each namespace variable along
// with its valus. You'll notice that the internal name of
// each namespace variable resembles a Unix pathname, so a
// name such as
//
//  i ns::
//
// is stored in the BTree as /i/ns.



// Printing internal counters: debug

"" println
"debug:" println
debug

// This is really useful for diagnosing stack and namespace leaks,
// and shale memory leaks. The debug output looks like this
//
//  Number: count 0, free 0.  String: count 0, free 0.  Pointer: count 0, free 0.  Free bags: 0
//  Stack: depth 6, free 2
//  BTree: depth 1, nodes 1, entries 6
//
// These numbers are interrelated to some degree.
//
// If your stack depth rises as your script runs then
// you are pushing objects on the stack without calling an operator
// to deal with those objects. You'll need to work out where these
// pushes are occuring and either remove them or work out why you're
// not calling the intended operator. If your stack depth is rising you may
// also find the "Number, String, Pointer" numbers (count minus free) also rise.
// This is an artifact of pushing something on the stack and never processing it.
// It wont always be the case that the "Number, ..." numbers will rise,
// it's just more likely that they will.
//
// If your BTree numbers rise then this means you're storing more and more
// entries in namespace variables. You will quite possibly get a similar
// rise in the "Number, ..." numbers. If you're expecting your script to
// store more and more data in namespace variables then this is OK,
// but if you're not then you have a namespace leak problem.
//
// If the stack and BTree numbers are static and the "Number, ..." numbers
// are rising then this is a pretty good indication that there is
// a memory leak within shale. If this happens, please let me know.
