#!/usr/local/bin/shale

// shale has two types of functions: simple and proper.
//
// A simple function is a code fragment assigned to a variable.
// A proper function is also a code fragment assigned to a variable,
// but the code fragment is tagged in a special way that allows a
// "return" operator to exit the nearest enclosing tagged code fragment.



// Simple functions

// A simple function is a code fragment assigned to a variable, like

sf var
sf {
  1 2 + 3 * println
} =

// And to execute the function you can use the "execute" or () operators

sf execute
sf()

// You can create quite complex functions with this, but there is
// a drawback - there is no return statement that will exit this code fragment.
// This may complicate your code if you want to return from the
// code fragment from deep within nested if/ifthen/while operators.
// But, for many situations, a simple function is all that's needed.



// Proper functions

// A proper function is also a code fragment assigned to a variable,
// except you add a "function" operator to the code fragment, usually at
// the top of the fragment, but anywhere will do. Tagging a fragment this way
// means a "return" operator knows when to stop unwinding nested fragments.

i var     // define a couple of variables to make the example interesting.
i 123 =
j var
j 987 =

pf var
pf { function     // Tag this fragment as a function so a return operator knows where to exit.
  i 100 > {
    j 1000 < {
      n var       // Let's assume we've found what we're looking for.
      n 0 =       // Print something and return from the function.
      "Found it" println
      { n j < } {
        n "n = %d\n" printf
        n n 100 + =
      } while
      return      // we're out of here.
    } {
      // do something
    } if
  } {
    // do something
  } if
  "this will not be output" println
} =

pf()

// The "function" operator is a no-op in that is does not touch the
// stack nor any variables. It's sole job is to tag its code fragment
// as being the end point of a "return" operator.

// And just to be clear, the function operator will tag any code fragment,
// not just those assigned to a variable. It is perfectly fine to tag an
// inline code fragment that is part of an if or ifthen.

i 100 < {
  "i is less than 100" println
} {
  function
  "i is greater or equal to 100" println
  return
  "this will not be output" println
} if
"we're outside the if" println

// Tagging the conditional code fragment of a while loop as a function and returning
// from that fragment will work just fine, as long as you leave the expected boolean
// on the stack, that is. However, taggng the body of the while loop and returning
// from that body fragment will act just like a "continue" statement in C - it will
// terminate the body fragment and return control to the while operator where it will,
// once again, execute the conditional code ... etc.

"" println
"Using function/return as a while loop continue" println
i 0 =
{ i 10 < } { function
  i 5 < { i++ return } ifthen   // Don't forget the loop counter if your loop needs it.
  i println
  i++
} while
