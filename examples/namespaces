#!/usr/local/bin/shale

// Namespaces give you another way of creating variables, but they are
// different to simple variables in important ways.
//
// To recap simple variables, you create them with the var operator
//
//  i var
//
// and they have a scope that is defined by the code fragment's execution
// rather than a lexical scope you'd expect in a C-like language.
// You can read more about this in the variables example file.
//
// Namespaces can be used to create variables that are global. They are not
// tied to a code fragment's execution. And namespaces have features that
// mean they can be used to implement arrays (single or multi-dimensional,
// fully populated and sparse). You can think of namespaces as
// something like a perl hash, or even a struct or class if you really
// squint your eyes. shale doesn't have structs or classes, but you can
// use namespaces to achieve something resembling them.
//
// The namespace operator is :: and it takes two names from the stack.
// For example
//
//  i ns::
//
// is the variable i in the namespace ns.
// All this does is push a variable name on the stack. It doesn't create the variable.
// You create the variable with the var operator as you would with simple variables

i ns:: var

// And you can use "i ns::" anywhere you can use a simple variable.
// You can assign a value to it

i ns:: 123 =

// Assign a code fragment to it and execute it

i ns:: { "Hello, World!" println } =
i ns::()

// Pointer assignment and dereference works as well

i var
i 321 =
i ns:: i &=
i ns::-> println      // 321

j var
j i ns:: &=
j-> 3.141 =
i ns:: println        // 3.141

// Anything you can do with a simple variable you can do with a namespace variable.




// Namespaces can be nested

i a:: b:: var

// is i in namespace a, which in turn is in namespace b. Effectively b::a::i.
// You can nest them as deep as you want, subject to variable name length limitations,
// and again you can use this like a simple variable.




// The index and namespace name don't have to be names, they can be numbers
// or strings.

0 a:: var
0 a:: 123 =

// In effect this is the equivalent of a[0] = 123 in C.
//
// And if you want the equivalent of a[i] you could use

i 0 =
i.value a:: println

// ".value" is an operator that takes a variable name from the stack
// and pushes the variable's value on the stack. As "." is not a valid variable name character,
// you don't need a space. You could write it with a space: i .value a:: println
// I don't use a space for purely asthetic reasons. There's also a "value" operator,
// which is the same as .value, so you could write this as: i value a:: println

// To effect multi-dimensional arrays, nest them

5 8:: a:: var
5 8:: a:: 987 =

// is equivalent to a[8][5] = 987. And when using index variables

i 5 =
j 8 =
i.value j.value:: a:: println

// will print the value of a[j][i], 987.
//
// There is an example of using multi-dimensional arrays in the sudoku-solver.




// Taking it further, the index and namespace name can be strings
// or floating point numbers. Floating point numbers may
// not be that useful, but strings are ueful when your index or name
// is an arbitrary string of characters.

"ibb" "Arnold Schwarzenegger":: "Famous Quotes":: var
"ibb" "Arnold Schwarzenegger":: "Famous Quotes":: "I'll be back" =



// shale uses the shale:: namespace to store a couple of things you may find useful

file arg:: shale:: "script name '%s'\n" printf
language option:: shale:: "The language is currently set to \"%s\"\n" printf
micro version:: shale:: minor version:: shale:: major version:: shale:: "shale version %d.%d.%d\n" printf



// Closing comment.

// When you're developing a script that uses namespaces, it is handy to
// know about the btree operator. It prints the contents of the BTree
// that stores the namespace variables.

btree

// See the debugging example for more details about btree, and debugging in general.
