#!/usr/local/bin/shale

// Here's a simple while loop that sums the numbers from 1 to n.
//
// n is passed in as a replacement on the command line, eg:
//
//  ./while n=10
//
// Anywhere n appears in the script will be replaced with the n= text.

// First, check that n has been given on the command line,
// and print a usage message and exit if it has not.
n initialised not {
  file arg:: shale:: "Usage: %s n={n}\n" printf
  file arg:: shale:: "  eg: %s n=10\n" printf
  1 exit
} ifthen

// Some sanity checking. n must be greater than 0.
n 0 <= {
  "n must be greater than 0" println
  1 exit
} ifthen

// We're going to implement the equivalent of this C code
//
//  int i;
//  int res;
//  i = 1;
//  res = 0;
//  while(i <= n) {
//    res = res + i;
//    i = i + 1;
//  }
//  printf("%d\n", res);

// The while operator expects two code fragments or variables whose
// value is a code fragment on the stack,
// one that indicates whether the loop should terminate or keep going,
// and the other is the body of the while.

// Define the variables.
i var     // loop counter
res var   // result

// Initialise the variables.
i 1 =
res 0 =

// The loop condition, and ...
{ i n <= } {
  // .. the body of the loop.
  res res i + =     // res = res + i;
  i i 1 + =         // i = i + 1;
} while

res "%d\n" printf

// One or both of the condition and body can also be variables
// whose value is a code fragment.

i 0 =
res 0 =
condition var
condition {
  i n <=
} =
body var
body {
  res res i + =
  i i 1 + =
} =
condition body while
res "%d\n" printf
