#!/usr/local/bin/shale

// The while operator

// The while operator expectes two code fragments on the stack.
// The first you push on is the conditon fragment and the second
// is the body fragment.
//
// The condition fragment will be executed and must leave a boolean
// on the stack. If that boolean is true then the body fragment
// will be executed. And so it goes on until the condition fragment
// leave a false on the stack.

// Here's a simple example

"Simple while loop" println
i var                   // The loop counter ...
i 0 =                   // ... is initialised
{ i 10 < } {            // The condition fragment and opening the body fragment
  i "i = %d\n" printf   // Do something interesting
  i++                   // Increment the loop counter
} while                 // Close the body fragment and call the while operator



// There are two controls you have over the execution of
// the while loop. You can explicitly terminte the loop,
// or you can explicitly continue the body fragment, before its natural end.
// In C-like languages you would use the break and continue keywords.
// In shale there is a break operator, and the continue functionaliy
// is available courtesy of the function and return operators.



// Breaking from a loop

// The break operator can be used anywhere within the body fragment
// or any fragments that are subsequently executed by the body fragment.
// The break scope is exactly the same as the scope of a simple variable.

"" println
"Break from while loop" println
i 0 =
{ i 10 < } {
  i 5 == {        // When i hits 5 ...
    break         // ... terminate the loop
  } ifthen
  i "i = %d\n" printf
  i++
} while



// Continuing a loop

// To get the same effect as a continue you use the function and return operators.
// These are explained in the functions example file, but I'll give a quick
// overview here.
//
// You tag your body fragment as a function, then you use the return operator
// anywhere within the body fragment or any fragments that are subsequently
// executed by the body fragment. The scope of the return is the same as the scope
// of the break, which is the same as the scope of simple variables.

"" println
"Continue a while loop" println
i 0 =
{ i 10 < } { function   // Tag this fragment as a function
  i 5 < {               // While i is less than 5 ...
    i++                 // (don't forget the loop counter)
    return              // ... skip the rest
  } ifthen
  i "i = %d\n" printf
  i++
} while



// Closing comment.

// Like other operators that use code fragments, you can pass in variables
// that have been assigned to a code fragment (a function) to the while operator.

"" println
"While loop using variables" println
condition var
condition { i 10 < } =
body var
body { i "i = %d\n" printf i++ } =
i 0 =
condition body while
